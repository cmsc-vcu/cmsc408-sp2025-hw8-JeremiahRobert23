---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-JeremiahRobert23>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx, """
SELECT 
    `Short Name`
FROM 
    world_bank_data.wdi_country
WHERE 
    `Region` IS NULL;
""")

```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
drop table if exists people;
drop table if exists peopleroles;
drop table if exists peopleskills;
drop table if exists roles;
drop table if exists skills;


""")
```

```{python}
# create table
execute_ddl(cnx,"""
CREATE TABLE wdi_country AS

SELECT *

from world_bank_data.wdi_country

WHERE region IS NOT NULL;


""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
SELECT count(*) FROM wdi_country;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) from wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select `Region`
from wdi_country
group by `Region`
order by `Region`
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select `Region`, count(*) as "Count"
from wdi_country
group by `Region`
order by `Region`
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Region` ,  `Long Name`
from wdi_country
where `Region` = 'North America'
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select `Region` ,  `Short Name`, `Long Name`
from wdi_country
where `Short Name` = 'Qatar'
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`, `Region`
from wdi_country
where `2-alpha code` <> `WB-2 code`
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT 
    `Income Group`, COUNT(*) AS number_of_countries
FROM 
    wdi_country
GROUP BY 
    `Income Group`
ORDER BY 
    number_of_countries DESC;

""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
SELECT 
    `Short Name`, 
    `Region`, 
    `Income Group`
    
FROM 
    wdi_country
WHERE 
    `Income Group` IS NULL;

""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
UPDATE wdi_country
SET `Income Group` = 'High income'
WHERE `Income Group` IS NULL;
commit;
""")


```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx, """
SELECT 
    `Short Name`, 
    `Region`, 
    `Income Group`
FROM 
    wdi_country
WHERE 
    `Short Name` = 'Venezuela';
""")


```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT 
    `Region`, 
    `Income Group`, 
    COUNT(*) AS `no.of.countries`
FROM 
    wdi_country
GROUP BY 
    `Region`, 
    `Income Group`
ORDER BY 
    `Region`, 
    `Income Group`;
  
""")


```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx, """
SELECT 
    `Region`,
    CAST(COUNT(CASE WHEN `Income Group` = 'Low income' THEN 1 END) AS DECIMAL(10,1)) AS `Low Income`,
    CAST(COUNT(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 END) AS DECIMAL(10,1)) AS `Low Middle`,
    CAST(COUNT(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 END) AS DECIMAL(10,1)) AS `Upper Middle`,
    CAST(COUNT(CASE WHEN `Income Group` = 'High income' THEN 1 END) AS DECIMAL(10,1)) AS `High Income`,
    CAST(COUNT(*) AS DECIMAL(10,1)) AS `Row Total`
FROM 
    wdi_country
GROUP BY 
    `Region`
ORDER BY 
    `Region`;
""")



```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx, """
SELECT 
    COUNT(*) AS `count(*)`, 
    `Region`, 
    `Income Group`
FROM 
    wdi_country
WHERE 
    `Income Group` = 'Low income'
GROUP BY 
    `Region`, `Income Group`
ORDER BY 
    `count(*)` DESC
LIMIT 1;
""")


```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx, """
SELECT 
    `Country Code`, 
    `Short Name`, 
    `Region`, 
    `Income Group`
FROM 
    wdi_country
WHERE 
    `Region` = (SELECT `Region` FROM wdi_country WHERE `Country Code` = 'MHL')
    AND `Income Group` = (SELECT `Income Group` FROM wdi_country WHERE `Country Code` = 'MHL')
ORDER BY 
    `Short Name`;
""")


```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx, """
SELECT 
    r.Region,
    ig.`Income Group`,
    COUNT(wd.`Country Code`) AS `# Countries`
FROM
    (SELECT DISTINCT `Region` FROM wdi_country) r  -- All regions
CROSS JOIN
    (SELECT 'Low income' AS `Income Group`
     UNION ALL SELECT 'Lower middle income'
     UNION ALL SELECT 'Upper middle income'
     UNION ALL SELECT 'High income') ig  -- All income categories
LEFT JOIN 
    wdi_country wd ON r.Region = wd.Region AND ig.`Income Group` = wd.`Income Group`
GROUP BY 
    r.Region, ig.`Income Group`
HAVING 
    COUNT(wd.`Country Code`) = 0  -- Only show missing combinations
ORDER BY 
    r.Region, ig.`Income Group`;
""")


```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
WITH region_income_counts AS (
  SELECT 
    `Region`, 
    `Income Group`, 
    COUNT(*) AS country_count
  FROM 
    wdi_country
  GROUP BY 
    `Region`, `Income Group`
), total_counts AS (
  SELECT COUNT(*) AS total_countries FROM wdi_country
)
SELECT 
  region_income_counts.`Region`,
  region_income_counts.`Income Group`,
  region_income_counts.country_count,
  total_counts.total_countries,
  ROUND((region_income_counts.country_count / total_counts.total_countries) * 100, 2) AS "Percentage of Total"
FROM 
  region_income_counts, total_counts
ORDER BY 
  region_income_counts.`Region`, region_income_counts.`Income Group`;
""")





```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH region_income_counts AS (
  SELECT 
    `Region`, 
    `Income Group`, 
    COUNT(*) AS country_count
  FROM 
    wdi_country
  GROUP BY 
    `Region`, `Income Group`
), total_counts AS (
  SELECT COUNT(*) AS total_countries FROM wdi_country
)
SELECT 
  region_income_counts.`Region`,
  SUM(CASE WHEN region_income_counts.`Income Group` = 'High income' THEN 1 ELSE 0 END) AS "High Income",
  SUM(CASE WHEN region_income_counts.`Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS "Upper Middle Income",
  SUM(CASE WHEN region_income_counts.`Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS "Lower Middle Income",
  SUM(CASE WHEN region_income_counts.`Income Group` = 'Low income' THEN 1 ELSE 0 END) AS "Low Income",
  SUM(CASE WHEN region_income_counts.`Income Group` IS NULL THEN 1 ELSE 0 END) AS "No Income Group",
  ROUND((SUM(region_income_counts.country_count) / (SELECT total_countries FROM total_counts)) * 100, 2) AS "Percent of Total"
FROM 
  region_income_counts, total_counts
GROUP BY 
  region_income_counts.`Region`
ORDER BY 
  region_income_counts.`Region`;
""")


```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
SELECT 
  `Income Group`, 
  COUNT(*) AS "Number of Countries", 
  ROUND((COUNT(*) / (SELECT COUNT(*) FROM wdi_country)) * 100, 1) AS "Percentage of Total"
FROM 
  wdi_country
GROUP BY 
  `Income Group`
ORDER BY 
  `Income Group`;

""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

Throughout this assignment, I gained confidence in using SELECT, JOIN, and GROUP BY to manipulate and analyze data. I'm particularly comfortable with aggregating data and working with basic joins. However, I still need to practice subqueries and more advanced SQL operations, like handling complex joins and calculating percentages. This assignment reinforced my ability to transform raw data into actionable insights, which will be helpful for future data analysis tasks.



2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

I first broke the problems into smaller steps, starting with simpler queries and gradually building on them. When encountering challenges, I checked intermediate results to troubleshoot and ensure the data was correct. In the future, I would use temporary tables or WITH clauses to streamline the process and make the queries easier to debug and understand.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaway from this assignment was learning how to aggregate, transform, and clean data effectively with SQL. This will be valuable in real-world scenarios where data often needs to be processed and cleaned before analysis. These skills will also be beneficial in future coursework, particularly in data science and database management, where I’ll need to manipulate large datasets and generate meaningful insights.


# README



::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

